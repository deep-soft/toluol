name: act - build

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      archive_all:
        description: archive all
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  TAG_NAME: "toluol"
  TAG_VERSION:   "toluol-v1.0.0"
  TAG_BUILD:     "-b"
  TAG_REF:       "0000000"
  PROG_NAME:     "toluol"
  PROG_VERSION:  "v1.0.0"
  VERSION:       "1.0.0"
  DEBUG_LS:      "yes"

jobs:
  build:
    name: ${{ matrix.job.gui }} ${{ matrix.job.os }} (${{ matrix.job.target }} )
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { gui: Lin, arch: x86_64, target: x86_64-unknown-linux-gnu  , os: ubuntu-20.04 }
          - { gui: Win, arch: x86_64, target: x86_64-pc-windows-msvc    , os: windows-2022 }
    steps:
      - name: Checkout source code
        uses: deep-soft/checkout@v3

## -- read from toml - begin
      - name: Read toml package.version
        uses: deep-soft/toml-action@v1.0.2
        id: read_toml_version
        with:
          file: 'toluol/Cargo.toml'
          field: 'package.version'

      - name: Set env.PROG_VERSION
        shell: bash
        run: |
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"

          echo "set PROG_VERSION with value from Cargo.toml"
          _version_=${{ steps.read_toml_version.outputs.value }}
          prog_version="v"$_version_

          echo "PROG_VERSION = $prog_version"
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version"

          echo "set env.PROG_VERSION with value from Cargo.toml"
          echo "PROG_VERSION=$prog_version" >> $GITHUB_ENV
          echo "VERSION=$_version_" >> $GITHUB_ENV
          echo "TAG_VERSION=${{ env.PROG_NAME }}-$prog_version" >> $GITHUB_ENV

      - name: Print env.PROG_VERSION
        shell: bash
        run: |
          echo "show new value for env.PROG_VERSION"
          echo "PROG_VERSION = ${{ env.PROG_VERSION }}"
          echo "TAG_VERSION  = ${{ env.TAG_VERSION  }}"

## -- read from toml - end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt

      - name: Create source archive
        continue-on-error: true
        shell: bash
        run: |
          staging="${{ env.PROG_NAME }}-src-${{ env.VERSION }}-${{ matrix.job.target }}--${{ matrix.job.gui }}"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            7z a "$staging.zip" "*" -x!target/* -x!vcpkg/* > nul
            echo "ASSET_SRC=$staging.zip" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name:"
              ls -l "$staging.zip"
            fi
          else
            touch "$staging.tar.xz"
            #tar -cfJ "$staging.tar.xz" --exclude "$staging.tar.xz" .
            tar --exclude=*.tar* --exclude=target/*  --exclude=vcpkg/* -cv . | xz -9 > "$staging.tar.xz"
            echo "ASSET_SRC=$staging.tar.xz" >> $GITHUB_ENV
            if [ "${{ env.DEBUG_LS }}" = "yes" ]; then
              echo "source archive name: "
              ls -l "$staging.tar.xz"
            fi
          fi
          #ls -l ${{ env.ASSET_SRC }} 

      - name: Publish src archives
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ASSET_SRC }}

      - name: Install Rust toolchain
        uses: deep-soft/rust-toolchain@master
        with:
          toolchain: stable
          #  Rustup toolchain specifier e.g. stable, nightly, 1.42.0
          #  the default is to match the @rev as described above. When passing an explicit toolchain as an input instead of @rev, you'll want to use "rust-toolchain@master" as the revision of the action.
          targets: ${{ matrix.job.target }}
          #  Comma-separated string of additional targets
          components: ''
          #  Comma-separated string of additional components to install e.g. clippy, rustfmt

      - uses: deep-soft/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}
    
      - name: Build
        run: cargo build --verbose --release

      - name: copy release
        continue-on-error: true
        shell: bash
        run: |
          mkdir ./SignOutput
          exe_ext=''
          if [[ matrix.job.gui == 'Win' ]]; then
            exe_ext='.exe'
          fi
          cp ./target/release/${{ env.PROG_NAME }}$exe_ext ./SignOutput/
          ls -l ./SignOutput/

      - name: Sign files
        if: ${{ env.sign_exe }}
        continue-on-error: true        
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.CERTNAME }}'
          folder: './SignOutput/'
          recursive: true

      - name: Archive release
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          # filename: '${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ matrix.job.gui }}-${{ matrix.job.target }}.zip'
          filename: '${{ env.PROG_NAME }}-${{ env.PROG_VERSION }}-${{ matrix.job.gui }}.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'
          directory: './SignOutput/'
          path: '.'

      - name: Publish Release
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish Release version
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_VERSION }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Archive ALL
        if: ${{ inputs.archive_all }}
        continue-on-error: true
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.PROG_NAME }}-${{ matrix.job.gui }}-ALL.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'      

      - name: Publish archive ALL
        if: ${{ inputs.archive_all }}
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Run tests
        run: cargo test --verbose
